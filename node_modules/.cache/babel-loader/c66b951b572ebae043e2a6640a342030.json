{"ast":null,"code":"var _jsxFileName = \"/Users/sambaran/Desktop/React/memegenerator/src/components/Meme.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport memesData from \"../memesData.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Meme() {\n  _s();\n\n  /**\n   * Challenge: \n   * 1. Set up the text inputs to save to\n   *    the `topText` and `bottomText` state variables.\n   * 2. Replace the hard-coded text on the image with\n   *    the text being saved to state.\n   */\n  const [formData, setFormData] = React.useState({\n    topText: \"\",\n    bottomText: \"\"\n  });\n  const [meme, setMeme] = React.useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemeImages, setAllMemeImages] = React.useState(memesData);\n\n  function changeHandler(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevFormData => ({ ...prevFormData,\n      [name]: value\n    }));\n  }\n\n  function getMemeImage() {\n    const memesArray = allMemeImages.data.memes;\n    const randomNumber = Math.floor(Math.random() * memesArray.length);\n    const url = memesArray[randomNumber].url;\n    setMeme(prevMeme => ({ ...prevMeme,\n      randomImage: url\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"topText\",\n        type: \"text\",\n        value: formData.topText,\n        onChange: changeHandler,\n        placeholder: \"Top text\",\n        className: \"form--input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"bottomText\",\n        type: \"text\",\n        value: formData.bottomText,\n        onChange: changeHandler,\n        placeholder: \"Bottom text\",\n        className: \"form--input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--button\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"meme--image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text top\",\n        children: \"One does not simply\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme--text bottom\",\n        children: \"Walk into Mordor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Meme, \"r6FRHpULf8JPEHfRurhWJLrKqAc=\");\n\n_c = Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"sources":["/Users/sambaran/Desktop/React/memegenerator/src/components/Meme.jsx"],"names":["React","memesData","Meme","formData","setFormData","useState","topText","bottomText","meme","setMeme","randomImage","allMemeImages","setAllMemeImages","changeHandler","event","name","value","target","prevFormData","getMemeImage","memesArray","data","memes","randomNumber","Math","floor","random","length","url","prevMeme"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC3B;AACJ;AACA;AACA;AACA;AACA;AACA;AACK,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,KAAK,CAACK,QAAN,CAAe;AAC5CC,IAAAA,OAAO,EAAE,EADmC;AAE5CC,IAAAA,UAAU,EAAE;AAFgC,GAAf,CAAhC;AAID,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,KAAK,CAACK,QAAN,CAAe;AACnCC,IAAAA,OAAO,EAAE,EAD0B;AAEnCC,IAAAA,UAAU,EAAE,EAFuB;AAGnCG,IAAAA,WAAW,EAAE;AAHsB,GAAf,CAAxB;AAKA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCZ,KAAK,CAACK,QAAN,CAAeJ,SAAf,CAA1C;;AAEA,WAASY,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAgBF,KAAK,CAACG,MAA5B;AACAb,IAAAA,WAAW,CAACc,YAAY,KAAK,EACzB,GAAGA,YADsB;AAEzB,OAACH,IAAD,GAASC;AAFgB,KAAL,CAAb,CAAX;AAIH;;AACD,WAASG,YAAT,GAAwB;AACpB,UAAMC,UAAU,GAAGT,aAAa,CAACU,IAAd,CAAmBC,KAAtC;AACA,UAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,UAAU,CAACO,MAAtC,CAArB;AACA,UAAMC,GAAG,GAAGR,UAAU,CAACG,YAAD,CAAV,CAAyBK,GAArC;AACAnB,IAAAA,OAAO,CAACoB,QAAQ,KAAK,EACjB,GAAGA,QADc;AAEjBnB,MAAAA,WAAW,EAAEkB;AAFI,KAAL,CAAT,CAAP;AAKH;;AAED,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI;AACI,QAAA,IAAI,EAAC,SADT;AAEI,QAAA,IAAI,EAAC,MAFT;AAGI,QAAA,KAAK,EAAEzB,QAAQ,CAACG,OAHpB;AAII,QAAA,QAAQ,EAAEO,aAJd;AAKI,QAAA,WAAW,EAAC,UALhB;AAMI,QAAA,SAAS,EAAC;AANd;AAAA;AAAA;AAAA;AAAA,cADJ,eASI;AACI,QAAA,IAAI,EAAC,YADT;AAEI,QAAA,IAAI,EAAC,MAFT;AAGI,QAAA,KAAK,EAAEV,QAAQ,CAACI,UAHpB;AAII,QAAA,QAAQ,EAAEM,aAJd;AAKI,QAAA,WAAW,EAAC,aALhB;AAMI,QAAA,SAAS,EAAC;AANd;AAAA;AAAA;AAAA;AAAA,cATJ,eAiBI;AACI,QAAA,SAAS,EAAC,cADd;AAEI,QAAA,OAAO,EAAEM,YAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAyBI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI;AAAK,QAAA,GAAG,EAAEX,IAAI,CAACE,WAAf;AAA4B,QAAA,SAAS,EAAC;AAAtC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAI,QAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAI,QAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiCH;;GAtEuBR,I;;KAAAA,I","sourcesContent":["import React from \"react\"\nimport memesData from \"../memesData.js\"\n\nexport default function Meme() {\n    /**\n     * Challenge: \n     * 1. Set up the text inputs to save to\n     *    the `topText` and `bottomText` state variables.\n     * 2. Replace the hard-coded text on the image with\n     *    the text being saved to state.\n     */\n     const [formData, setFormData] = React.useState({\n        topText: \"\",\n        bottomText: \"\"\n    })\n    const [meme, setMeme] = React.useState({\n        topText: \"\",\n        bottomText: \"\",\n        randomImage: \"http://i.imgflip.com/1bij.jpg\" \n    })\n    const [allMemeImages, setAllMemeImages] = React.useState(memesData)\n    \n    function changeHandler(event) {\n        const {name, value} = event.target\n        setFormData(prevFormData => ({\n            ...prevFormData,\n            [name] : value\n        }))\n    }\n    function getMemeImage() {\n        const memesArray = allMemeImages.data.memes\n        const randomNumber = Math.floor(Math.random() * memesArray.length)\n        const url = memesArray[randomNumber].url\n        setMeme(prevMeme => ({\n            ...prevMeme,\n            randomImage: url\n        }))\n        \n    }\n    \n    return (\n        <main>\n            <div className=\"form\">\n                <input \n                    name=\"topText\"\n                    type=\"text\"\n                    value={formData.topText}\n                    onChange={changeHandler}\n                    placeholder=\"Top text\"\n                    className=\"form--input\"\n                />\n                <input \n                    name=\"bottomText\"\n                    type=\"text\"\n                    value={formData.bottomText}\n                    onChange={changeHandler}\n                    placeholder=\"Bottom text\"\n                    className=\"form--input\"\n                />\n                <button \n                    className=\"form--button\"\n                    onClick={getMemeImage}\n                >\n                    Get a new meme image ðŸ–¼\n                </button>\n            </div>\n            <div className=\"meme\">\n                <img src={meme.randomImage} className=\"meme--image\" />\n                <h2 className=\"meme--text top\">One does not simply</h2>\n                <h2 className=\"meme--text bottom\">Walk into Mordor</h2>\n            </div>\n        </main>\n    )\n}"]},"metadata":{},"sourceType":"module"}